name: Buger Eats CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Configura√ß√£o inicial
  setup:
    runs-on: ubuntu-latest
    outputs:
      api_exists: ${{ steps.check_api.outputs.exists }}
      web_exists: ${{ steps.check_web.outputs.exists }}

    steps:
      - name: üì• Checkout do C√≥digo
        uses: actions/checkout@v4

      - name: üîç Verificar Exist√™ncia da Pasta API
        id: check_api
        run: |
          if [ -d "api" ]; then echo "exists=true" >> "$GITHUB_OUTPUT"; else echo "exists=false" >> "$GITHUB_OUTPUT"; fi

      - name: üîç Verificar Exist√™ncia da Pasta Web
        id: check_web
        run: |
          if [ -d "web" ]; then echo "exists=true" >> "$GITHUB_OUTPUT"; else echo "exists=false" >> "$GITHUB_OUTPUT"; fi

  # Testes de API
  api-test:
    needs: setup
    if: needs.setup.outputs.api_exists == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout do C√≥digo
        uses: actions/checkout@v4

      - name: üì¶ Configurar Ambiente Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: üîß Criar Ambiente Virtual e Instalar Depend√™ncias
        run: |
          python -m venv .venv
          .venv/bin/pip install --upgrade pip
          .venv/bin/pip install -r requirements.txt

      - name: üîß Criar Arquivo .env para a API
        run: |
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" > api/.env
          echo "MONGO_DB_NAME=${{ secrets.MONGO_DB_NAME }}" >> api/.env
          echo "MONGO_COLLECTION_NAME=${{ secrets.MONGO_COLLECTION_NAME }}" >> api/.env
          echo "AMQP_URL=${{ secrets.AMQP_URL }}" >> api/.env
          echo "QUEUE_NAME=${{ secrets.QUEUE_NAME }}" >> api/.env

      - name: üöÄ Instalar Depend√™ncias da API (Node.js)
        run: cd api && npm install

      - name: üöÄ Iniciar API
        run: cd api && npm start &
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
          MONGO_COLLECTION_NAME: ${{ secrets.MONGO_COLLECTION_NAME }}
          AMQP_URL: ${{ secrets.AMQP_URL }}
          QUEUE_NAME: ${{ secrets.QUEUE_NAME }}

      - name: üïí Aguardar API estar pronta
        run: sleep 5

      - name: üß™ Executar Testes de API
        run: .venv/bin/robot tests/api

  # Testes Web
  web-test:
    needs: [setup]
    if: needs.setup.outputs.web_exists == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout do C√≥digo
        uses: actions/checkout@v4

      - name: üì¶ Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: üì¶ Configurar Ambiente Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: üîß Instalar Depend√™ncias do Sistema
        run: |
          sudo apt-get update
          # Instalar depend√™ncias essenciais para o Xvfb e o navegador
          sudo apt-get install -y xvfb ca-certificates fonts-liberation libappindicator3-1 libasound2 libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 lsb-release wget xdg-utils

          # Iniciar o Xvfb
          Xvfb :99 -screen 0 1280x1024x24 -ac &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: üîß Criar Ambiente Virtual e Instalar Depend√™ncias
        run: |
          python -m venv .venv
          .venv/bin/pip install --upgrade pip
          .venv/bin/pip install -r requirements.txt

      - name: üîß Instalar Node Depend√™ncias para Browser Library
        run: |
          # Instalar Node.js necess√°rio para o Browser Library
          npm install -g npm@latest

      - name: üîß Inicializar Browser Library com depend√™ncias corretas
        run: |
          # Inicializar Browser Library com todas as depend√™ncias
          .venv/bin/rfbrowser init --skip-browsers
          cd /home/runner/.cache/node_modules/node_modules/playwright && npm install
          cd - && .venv/bin/python -m playwright install chromium

      - name: üìú Mostrar vers√µes instaladas
        run: |
          .venv/bin/python --version
          node --version
          npm --version
          .venv/bin/pip list | grep -E "robot|playwright|browser"
          ls -la $HOME/.cache/ms-playwright || echo "Diret√≥rio playwright n√£o encontrado"

      - name: üîß Criar Arquivo .env para a API
        run: |
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" > api/.env
          echo "MONGO_DB_NAME=${{ secrets.MONGO_DB_NAME }}" >> api/.env
          echo "MONGO_COLLECTION_NAME=${{ secrets.MONGO_COLLECTION_NAME }}" >> api/.env
          echo "AMQP_URL=${{ secrets.AMQP_URL }}" >> api/.env
          echo "QUEUE_NAME=${{ secrets.QUEUE_NAME }}" >> api/.env

      - name: üöÄ Instalar Depend√™ncias da API (Node.js)
        run: cd api && npm install

      - name: üöÄ Iniciar API
        run: cd api && npm start &
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
          MONGO_COLLECTION_NAME: ${{ secrets.MONGO_COLLECTION_NAME }}
          AMQP_URL: ${{ secrets.AMQP_URL }}
          QUEUE_NAME: ${{ secrets.QUEUE_NAME }}

      - name: üìÇ Instalar Depend√™ncias Web (Node.js)
        run: cd web && npm install

      - name: üöÄ Iniciar Web
        run: cd web && npm start &
        shell: bash

      - name: üïí Aguardar o Servidor Web estar pronto
        run: |
          echo "Aguardando servidor web..."
          status_code=0
          max_attempts=40
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Tentativa $attempt de $max_attempts..."

            if curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "200\|301\|302"; then
              echo "‚úÖ Servidor web est√° pronto! Status HTTP: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)"
              status_code=1
              break
            else
              echo "‚ùå Tentativa $attempt: Servidor ainda n√£o est√° pronto. Status HTTP: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 || echo 'falha ao conectar')"
              sleep 3
              attempt=$((attempt+1))
            fi
          done

          if [ $status_code -eq 0 ]; then
            echo "‚ö†Ô∏è Timeout ao aguardar o servidor web. Continuando mesmo assim..."
            # Debug info
            cd web && ls -la
            npm list || true
            ps aux | grep node || true
          fi

          sleep 5  # Aguardar um pouco mais para garantir que a UI esteja carregada

      - name: ü§ñ Executar Testes Automatizados Web
        run: |
          export PLAYWRIGHT_BROWSERS_PATH=$HOME/.cache/ms-playwright
          export BROWSER_PATH=$HOME/.cache/ms-playwright/chromium-*/chrome-linux

          echo "Verificando caminho do browser:"
          ls -la $BROWSER_PATH || echo "Caminho do browser n√£o encontrado"

          .venv/bin/robot \
          --variable BROWSER:chromium \
          --variable HEADLESS:True \
          --variable BROWSER_ARGS:"--no-sandbox --disable-dev-shm-usage --disable-gpu" \
          --variable TIMEOUT:120s \
          --loglevel DEBUG \
          -d results tests/web

      - name: üì§ Armazenar Relat√≥rios e Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: relatorios-de-testes
          path: |
            results/
            playwright-log.txt