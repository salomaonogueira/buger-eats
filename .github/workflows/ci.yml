name: buger-eats CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches:
      - main
      - develop

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      api_exists: ${{ steps.check_api.outputs.exists }}
      web_exists: ${{ steps.check_web.outputs.exists }}

    steps:
      - name: 📥 Checkout do Código
        uses: actions/checkout@v4

      - name: 🔎 Verificar Existência da API
        id: check_api
        run: |
          if [ -d "api" ]; then echo "exists=true" >> "$GITHUB_OUTPUT"; else echo "exists=false" >> "$GITHUB_OUTPUT"; fi

      - name: 🔎 Verificar Existência do Web
        id: check_web
        run: |
          if [ -d "web" ]; then echo "exists=true" >> "$GITHUB_OUTPUT"; else echo "exists=false" >> "$GITHUB_OUTPUT"; fi

  api-test:
    needs: setup
    if: needs.setup.outputs.api_exists == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout do Código
        uses: actions/checkout@v4

      - name: 📦 Configurar Python
        run: |
          python -m venv .venv
          .venv/bin/pip install --upgrade pip
          .venv/bin/pip install -r requirements.txt

      - name: 🔧 Criar `.env` para a API
        run: |
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" > api/.env
          echo "MONGO_DB_NAME=${{ secrets.MONGO_DB_NAME }}" >> api/.env
          echo "MONGO_COLLECTION_NAME=${{ secrets.MONGO_COLLECTION_NAME }}" >> api/.env
          echo "AMQP_URL=${{ secrets.AMQP_URL }}" >> api/.env
          echo "QUEUE_NAME=${{ secrets.QUEUE_NAME }}" >> api/.env

      - name: 🚀 Instalar Dependências da API
        run: cd api && npm install

      - name: 🚀 Iniciar API
        run: |
          cd api && npm start &
          sleep 10
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
          MONGO_COLLECTION_NAME: ${{ secrets.MONGO_COLLECTION_NAME }}
          AMQP_URL: ${{ secrets.AMQP_URL }}
          QUEUE_NAME: ${{ secrets.QUEUE_NAME }}

  web-test:
    needs: [setup, api-test]
    if: needs.setup.outputs.web_exists == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout do Código
        uses: actions/checkout@v4

      - name: 📦 Configurar Ambiente
        run: |
          sudo apt update && sudo apt install -y xvfb
          python -m venv .venv
          .venv/bin/pip install --upgrade pip
          .venv/bin/pip install -r requirements.txt

      - name: ⚙️ Inicializar Robot Framework Browser
        run: .venv/bin/rfbrowser init

      - name: 🚀 Instalar Dependências do Web
        run: cd web && npm install

      - name: 🚀 Iniciar Web
        run: |
          cd web && npm start &
          sleep 10  # Aguardar Web carregar completamente
        shell: bash

      - name: 🔄 Verificar se o Web realmente está rodando
        run: |
          curl --retry 5 --retry-delay 5 --retry-connrefused -v http://localhost:3000/ || (
            echo "❌ ERRO: O WEB NÃO ESTÁ RESPONDENDO!"
            exit 1
          )
        shell: bash

      - name: 🤖 Executar Testes Automatizados Web (Modo Headless)
        run: |
          xvfb-run -a .venv/bin/robot \
            --variable BROWSER:chromium \
            --variable HEADLESS:True \
            --variable ROBOT_BROWSER_TIMEOUT:20000 \
            --variable ROBOT_WAIT_TIME:2s \
            -d results tests/web

      - name: 📤 Armazenar Relatórios e Logs
        uses: actions/upload-artifact@v4
        with:
          name: relatorios-de-testes
          path: results/
