name: Buger Eats CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Configura√ß√£o inicial
  setup:
    runs-on: ubuntu-latest
    outputs:
      api_exists: ${{ steps.check_api.outputs.exists }}
      web_exists: ${{ steps.check_web.outputs.exists }}

    steps:
      - name: üì• Checkout do C√≥digo
        uses: actions/checkout@v4

      - name: üîç Verificar Exist√™ncia da Pasta API
        id: check_api
        run: |
          if [ -d "api" ]; then echo "exists=true" >> "$GITHUB_OUTPUT"; else echo "exists=false" >> "$GITHUB_OUTPUT"; fi

      - name: üîç Verificar Exist√™ncia da Pasta Web
        id: check_web
        run: |
          if [ -d "web" ]; then echo "exists=true" >> "$GITHUB_OUTPUT"; else echo "exists=false" >> "$GITHUB_OUTPUT"; fi

  # Testes de API
  api-test:
    needs: setup
    if: needs.setup.outputs.api_exists == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout do C√≥digo
        uses: actions/checkout@v4

      - name: üì¶ Configurar Ambiente Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: üîß Criar Ambiente Virtual e Instalar Depend√™ncias
        run: |
          python -m venv .venv
          .venv/bin/pip install --upgrade pip
          .venv/bin/pip install -r requirements.txt

      - name: üîß Criar Arquivo .env para a API
        run: |
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" > api/.env
          echo "MONGO_DB_NAME=${{ secrets.MONGO_DB_NAME }}" >> api/.env
          echo "MONGO_COLLECTION_NAME=${{ secrets.MONGO_COLLECTION_NAME }}" >> api/.env
          echo "AMQP_URL=${{ secrets.AMQP_URL }}" >> api/.env
          echo "QUEUE_NAME=${{ secrets.QUEUE_NAME }}" >> api/.env

      - name: üöÄ Instalar Depend√™ncias da API (Node.js)
        run: cd api && npm install

      - name: üöÄ Iniciar API
        run: cd api && npm start &
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
          MONGO_COLLECTION_NAME: ${{ secrets.MONGO_COLLECTION_NAME }}
          AMQP_URL: ${{ secrets.AMQP_URL }}
          QUEUE_NAME: ${{ secrets.QUEUE_NAME }}

      - name: üïí Aguardar API estar pronta
        run: sleep 5

      - name: üß™ Executar Testes de API
        run: .venv/bin/robot tests/api

  # Testes Web
  web-test:
    needs: [setup, api-test]
    if: needs.setup.outputs.web_exists == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout do C√≥digo
        uses: actions/checkout@v4

      - name: üì¶ Configurar Ambiente Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: üîß Criar Ambiente Virtual e Instalar Depend√™ncias
        run: |
          python -m venv .venv
          .venv/bin/pip install --upgrade pip
          .venv/bin/pip install -r requirements.txt

      - name: üîß Inicializar BrowserLibrary
        run: .venv/bin/rfbrowser init

      - name: üìÇ Instalar Depend√™ncias Web (Node.js)
        run: cd web && npm install

      - name: üöÄ Iniciar Web
        run: cd web && npm start &
        shell: bash

      - name: üïí Aguardar o Servidor Web estar pronto
        run: |
          echo "Aguardando servidor web..."
          for i in {1..20}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "Servidor web est√° pronto!"
              break
            else
              echo "Tentativa $i: Servidor ainda n√£o est√° pronto..."
              sleep 5
            fi
          done

      - name: Configurar o Xvfb
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          Xvfb :99 -screen 0 1280x1024x24 -ac &

      - name: ü§ñ Executar Testes Automatizados Web
        env:
          DISPLAY: :99
        run: |
          .venv/bin/robot \
          --variable BROWSER:chromium \
          --variable HEADLESS:True \
          --variable BROWSER_ARGS:"--no-sandbox --disable-dev-shm-usage --disable-gpu" \
          -d results tests/web

      - name: üì§ Armazenar Relat√≥rios e Logs
        uses: actions/upload-artifact@v4
        with:
          name: relatorios-de-testes
          path: results/
