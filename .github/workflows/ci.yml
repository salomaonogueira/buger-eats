name: buger-eats CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      api_exists: ${{ steps.check_api.outputs.exists }}
      web_exists: ${{ steps.check_web.outputs.exists }}

    steps:
      - name: üì• Checkout do C√≥digo
        uses: actions/checkout@v4

      - name: Verificar Exist√™ncia da Pasta API
        id: check_api
        run: |
          if [ -d "api" ]; then echo "exists=true" >> "$GITHUB_OUTPUT"; else echo "exists=false" >> "$GITHUB_OUTPUT"; fi

      - name: Verificar Exist√™ncia da Pasta Web
        id: check_web
        run: |
          if [ -d "web" ]; then echo "exists=true" >> "$GITHUB_OUTPUT"; else echo "exists=false" >> "$GITHUB_OUTPUT"; fi

  api-test:
    needs: setup
    if: needs.setup.outputs.api_exists == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout do C√≥digo
        uses: actions/checkout@v4

      - name: üì¶ Configurar Ambiente Python
        run: |
          python -m venv .venv
          .venv/bin/pip install --upgrade pip
          .venv/bin/pip install -r requirements.txt

      - name: üîß Criar Arquivo .env para a API
        run: |
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" > api/.env
          echo "MONGO_DB_NAME=${{ secrets.MONGO_DB_NAME }}" >> api/.env
          echo "MONGO_COLLECTION_NAME=${{ secrets.MONGO_COLLECTION_NAME }}" >> api/.env
          echo "AMQP_URL=${{ secrets.AMQP_URL }}" >> api/.env
          echo "QUEUE_NAME=${{ secrets.QUEUE_NAME }}" >> api/.env

      - name: üöÄ Instalar Depend√™ncias da API (Node.js)
        run: cd api && npm install

      - name: üöÄ Iniciar API
        run: cd api && npm start &
        shell: bash
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
          MONGO_COLLECTION_NAME: ${{ secrets.MONGO_COLLECTION_NAME }}
          AMQP_URL: ${{ secrets.AMQP_URL }}
          QUEUE_NAME: ${{ secrets.QUEUE_NAME }}

      - name: üß™ Executar Testes de API
        run: .venv/bin/robot tests/api

  web-test:
    needs: [setup, api-test]
    if: needs.setup.outputs.web_exists == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout do C√≥digo
        uses: actions/checkout@v4

      - name: üì¶ Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: üì¶ Instalar Depend√™ncias do Sistema para BrowserLibrary
        run: |
            sudo apt update
            sudo apt-get install -y --no-install-recommends \
              libgtk-3-0 libgtk-4-1 \
              libgraphene-1.0-0 libwoff1 libwoff2-1.0.2 \
              libvpx9 libevent-2.1-7 \
              libopus0 libgstallocators-1.0-0 \
              libgstaudio-1.0-0 libgstgl-1.0-0 \
              libgstpbutils-1.0-0 libgstvideo-1.0-0 \
              libgstcodecparsers-1.0-0 libgstfft-1.0-0 \
              libflite1 libflite-usenglish1 libflite-cmu-time-awb1 \
              libavif16 libharfbuzz-icu0 libsecret-1-0 \
              libhyphen0 libmanette-0.2-0 \
              libgles2 libx264-164 xvfb

      - name: üñ•Ô∏è Instalar Apenas o BrowserLibrary (sem Playwright extra)
        run: |
          python -m venv .venv
          .venv/bin/pip install --upgrade pip
          .venv/bin/pip install -r requirements.txt
          .venv/bin/rfbrowser init  # SOMENTE ESSA INSTALA√á√ÉO √â NECESS√ÅRIA!

      - name: üìÇ Instalar Depend√™ncias Web (Node.js)
        run: cd web && npm install

      - name: üöÄ Iniciar Web
        run: cd web && npm start &
        shell: bash

      - name: üïí Aguardar o Servidor Web estar pronto
        run: |
          echo "Aguardando servidor web..."
          for i in {1..20}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "Servidor web est√° pronto!"
              break
            else
              echo "Tentativa $i: Servidor ainda n√£o est√° pronto..."
              sleep 5
            fi
          done

      - name: ü§ñ Executar Testes Automatizados Web (modo headless otimizado)
        run: |
          Xvfb :99 -screen 0 1920x1080x24 &  # Inicia o servidor X virtual
          export DISPLAY=:99                 # Define a vari√°vel DISPLAY
          .venv/bin/robot \
            --variable BROWSER:chromium \
            --variable HEADLESS:True \
            --variable TIMEOUT:30000 \
            --variable RETRY:2 \
            --variable BROWSER_ARGS:--no-sandbox,--disable-dev-shm-usage,--disable-gpu,--disable-software-rasterizer,--disable-setuid-sandbox,--disable-extensions,--disable-background-networking,--mute-audio,--disable-popup-blocking,--disable-ipc-flooding-protection \
            -d results tests/web

      - name: üì§ Armazenar Relat√≥rios e Logs
        uses: actions/upload-artifact@v4
        with:
          name: relatorios-de-testes
          path: results/
